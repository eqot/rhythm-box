{"version":3,"sources":["components/Pane.tsx","containers/Tile.tsx","components/FullscreenButton.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Pane","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","event","preventDefault","sound","play","setState","isClicked","cancelPinch","state","Howl","src","_this2","style","backgroundColor","transition","transitionDuration","setTimeout","handlers","window","onTouchStart","onMouseDown","react_default","a","createElement","assign","onTouchMove","React","Component","Tile","_this$props","columns","rows","sounds","height","display","gridTemplateColumns","repeat","gridTemplateRows","panes","i","push","Pane_Pane","key","screenfull","require","FullscreenButton","enabled","request","onchange","forceUpdate","isFullscreen","position","right","top","fontSize","onClick","SOUNDS","map","file","concat","App","Fragment","Tile_Tile","FullscreenButton_FullscreenButton","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAWqBA,cAGnB,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqCRQ,YAAc,SAACC,GACbA,EAAMC,iBAENT,EAAKU,MAAMC,OAEXX,EAAKY,SAAS,iBAAO,CACnBC,WAAW,MA5CSb,EAgDxBc,YAAc,SAACN,GACbA,EAAMC,kBA9CNT,EAAKe,MAAQ,CACXF,WAAW,GAGbb,EAAKU,MAAQ,IAAIM,OAAK,CACpBC,IAAKjB,EAAKD,MAAMW,QARIV,wEAYf,IAAAkB,EAAAf,KACCU,EAAcV,KAAKY,MAAnBF,UAEFM,EAAQ,CAEZC,gBAAiBP,EAAY,QAAU,QACvCQ,WAAY,WACZC,mBAAoBT,EAAY,KAAO,SAGrCA,GACFU,WAAW,WACTL,EAAKN,SAAS,iBAAO,CACnBC,WAAW,MAEZ,GAGL,IAAMW,EACJ,iBAAkBC,OACd,CAAEC,aAAcvB,KAAKI,aACrB,CAAEoB,YAAaxB,KAAKI,aAE1B,OAAOqB,EAAAC,EAAAC,cAAA,MAAA7B,OAAA8B,OAAA,CAAKZ,MAAOA,GAAWK,EAAvB,CAAiCQ,YAAa7B,KAAKW,sBAtC5BmB,IAAMC,WCDnBC,mLAYjB,IAXO,IAAAC,EAC2BjC,KAAKJ,MAA/BsC,EADDD,EACCC,QAASC,EADVF,EACUE,KAAMC,EADhBH,EACgBG,OAEjBpB,EAAQ,CACZqB,OAAQ,OACRC,QAAS,OACTC,oBAAqB,OAAOC,OAAON,GACnCO,iBAAkB,OAAOD,OAAOL,IAG5BO,EAAQ,GACLC,EAAI,EAAGA,EAAIT,EAAUC,EAAMQ,IAClCD,EAAME,KAAKnB,EAAAC,EAAAC,cAACkB,EAAD,CAAMtC,MAAO6B,EAAOO,GAAIG,IAAKH,KAG1C,OAAOlB,EAAAC,EAAAC,cAAA,OAAKX,MAAOA,GAAQ0B,UAhBGZ,IAAMC,WCTlCgB,EAAaC,EAAQ,IAENC,6MA+BnB7C,YAAc,WACR2C,EAAWG,SACbH,EAAWI,8FAhCK,IAAApC,EAAAf,KACb+C,EAAWG,SAIhBH,EAAWK,SAAS,WAClBrC,EAAKsC,iDAKP,OAAKN,EAAWG,SAAWH,EAAWO,aAC7B,KAIP7B,EAAAC,EAAAC,cAAA,UACEX,MAAO,CACLuC,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,SAAU,IAEZC,QAAS3D,KAAKI,aAPhB,qBAjBwC0B,IAAMC,WCE9C6B,EAAS,CAAC,WAAY,aAAc,WAAY,YAAYC,IAChE,SAAAC,GAAI,kBAAAC,OAAgBD,KAGDE,mLAEjB,OACEvC,EAAAC,EAAAC,cAACF,EAAAC,EAAMuC,SAAP,KACExC,EAAAC,EAAAC,cAACuC,EAAD,CAAMhC,QAAS,EAAGC,KAAM,EAAGC,OAAQwB,IAEnCnC,EAAAC,EAAAC,cAACwC,EAAD,cANyBrC,IAAMC,WCGnBqC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.59fb65ad.chunk.js","sourcesContent":["import React from 'react'\nimport { Howl } from 'howler'\n\nexport interface Props {\n  sound: string\n}\n\ninterface State {\n  isClicked: boolean\n}\n\nexport default class Pane extends React.Component<Props, State> {\n  sound: any\n\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      isClicked: false\n    }\n\n    this.sound = new Howl({\n      src: this.props.sound\n    })\n  }\n\n  render() {\n    const { isClicked } = this.state\n\n    const style = {\n      // border: 'solid 1px white',\n      backgroundColor: isClicked ? 'white' : 'black',\n      transition: 'all ease',\n      transitionDuration: isClicked ? '0s' : '300ms'\n    }\n\n    if (isClicked) {\n      setTimeout(() => {\n        this.setState(() => ({\n          isClicked: false\n        }))\n      }, 1)\n    }\n\n    const handlers =\n      'ontouchstart' in window\n        ? { onTouchStart: this.handleClick }\n        : { onMouseDown: this.handleClick }\n\n    return <div style={style} {...handlers} onTouchMove={this.cancelPinch} />\n  }\n\n  handleClick = (event: any) => {\n    event.preventDefault()\n\n    this.sound.play()\n\n    this.setState(() => ({\n      isClicked: true\n    }))\n  }\n\n  cancelPinch = (event: any) => {\n    event.preventDefault()\n  }\n}\n","import React from 'react'\n\nimport Pane from '../components/Pane'\n\nexport interface Props {\n  columns: number\n  rows: number\n  sounds: Array<string>\n}\n\nexport default class Tile extends React.Component<Props> {\n  render() {\n    const { columns, rows, sounds } = this.props\n\n    const style = {\n      height: '100%',\n      display: 'grid',\n      gridTemplateColumns: '1fr '.repeat(columns),\n      gridTemplateRows: '1fr '.repeat(rows)\n    }\n\n    const panes = []\n    for (let i = 0; i < columns * rows; i++) {\n      panes.push(<Pane sound={sounds[i]} key={i} />)\n    }\n\n    return <div style={style}>{panes}</div>\n  }\n}\n","import React from 'react'\nconst screenfull = require('screenfull')\n\nexport default class FullscreenButton extends React.Component {\n  componentDidMount() {\n    if (!screenfull.enabled) {\n      return\n    }\n\n    screenfull.onchange(() => {\n      this.forceUpdate()\n    })\n  }\n\n  render() {\n    if (!screenfull.enabled || screenfull.isFullscreen) {\n      return null\n    }\n\n    return (\n      <button\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: 0,\n          fontSize: 20\n        }}\n        onClick={this.handleClick}\n      >\n        Fullscreen\n      </button>\n    )\n  }\n\n  handleClick = () => {\n    if (screenfull.enabled) {\n      screenfull.request()\n    }\n  }\n}\n","import React from 'react'\n\nimport Tile from './containers/Tile'\nimport FullscreenButton from './components/FullscreenButton'\n\nconst SOUNDS = ['tom1.mp3', 'cymbal.mp3', 'tom2.mp3', 'tom3.mp3'].map(\n  file => `./sounds/${file}`\n)\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Tile columns={2} rows={2} sounds={SOUNDS} />\n\n        <FullscreenButton />\n      </React.Fragment>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}